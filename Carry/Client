--//CLIENT//--

--//Settings
local MIN_DISTANCE = 6 --Pick up
local MAX_DISTANCE = 10 --The furthest can object be away
local FPS_CAP = 30

--//Services
local RunService = game["Run Service"]
local ReplicatedStorage = game.ReplicatedStorage
local ContextActionService = game.ContextActionService
local UserInputService = game.UserInputService
local Players = game.Players

local EVENTS = ReplicatedStorage.Events

--//References
local self = script
local SELECTION = self.Selection

local CARRY_EVENT = EVENTS.Carry

local ALIGN_POS = self.IsCarrying
local ALIGN_ORIENTATION = self.IsCarrying_Orientation

--//Player references
local LOCAL_PLAYER = Players.LocalPlayer
local PLAYER_SCRIPTS = LOCAL_PLAYER.PlayerScripts
local CURRENT_CAM = workspace.CurrentCamera
local MOUSE = LOCAL_PLAYER:GetMouse()

--//Misc references
local CONTROLS = require(PLAYER_SCRIPTS:WaitForChild("PlayerModule")):GetControls()
local KEYCODE = Enum.KeyCode

--//Functions
local function findCarriable(PART)
	local CURRENT = PART

	if PART:FindFirstChild("CarryPoint") then
		while CURRENT do
			if CURRENT:IsA("Model") then
				if CURRENT.PrimaryPart == PART then
					return CURRENT, CURRENT.PrimaryPart
				end
			end

			-- Move up using CURRENT's ancestor, not PART's
			CURRENT = CURRENT:FindFirstAncestorWhichIsA("Model")
		end

		return PART, PART
	else
		while CURRENT do
			if CURRENT:IsA("Model") then
				if CURRENT.PrimaryPart and CURRENT.PrimaryPart:FindFirstChild("CarryPoint") then
					return CURRENT, CURRENT.PrimaryPart 
				end
			end

			-- Move up using CURRENT's ancestor
			CURRENT = CURRENT:FindFirstAncestorWhichIsA("Model")
		end
	end

	return nil, nil
end

--//Dragging references
local CARRY_OBJECT --> Model :: Part
local CARRY_PART --> CARRY_OBJECT --> PrimaryPart or itself
local CARRYING = false
local ROTATING = false

local LAST_CARRY_OBJECT

--//Timing references
local LAST_TICK = tick()
local DEBOUNCE = 0.1 --Preventing fling

--//Highlighting carriable objects
local function HIGHLIGHT()
	UserInputService.MouseIcon = "rbxassetid://SystemCursors/OpenHand"
	SELECTION.Adornee = CARRY_OBJECT
	LAST_CARRY_OBJECT = CARRY_OBJECT
end

--//Un-highlight
local function UN_HIGHLIGHT()
	UserInputService.MouseIcon = "rbxassetid://SystemCursors/Arrow"
	SELECTION.Adornee = nil
	LAST_CARRY_OBJECT = nil
end

local function IS_BEING_CARRIED(obj)
	if obj:IsA("Model") then
		local primarypart = obj.PrimaryPart
		if primarypart:FindFirstChild("IsCarrying") then
			return true
		else
			return false
		end
	else
		if obj:FindFirstChild("IsCarrying") then
			return true
		else
			return false
		end
	end
end

--Selection handler
MOUSE.Move:Connect(function()
	local TARGET = MOUSE.Target

	if TARGET and not CARRYING then
		--//If model is carriable
		CARRY_OBJECT, CARRY_PART = findCarriable(TARGET)
		if CARRY_OBJECT then
			--//Checking distance
			local DISTANCE = (CARRY_PART.Position - CURRENT_CAM.CFrame.Position).Magnitude
			
			if CARRY_OBJECT ~= LAST_CARRY_OBJECT and DISTANCE <= MIN_DISTANCE then
				HIGHLIGHT()
			end
			
			return
		end
	end
	
	--//Un-assigning if fails
	if SELECTION.Adornee ~= nil then
		UN_HIGHLIGHT()
	end
end)

--Input start
UserInputService.InputBegan:Connect(function(INPUT, CHATTING)
	--Not receiving inputs if the player is chatting
	if CHATTING then
		return
	end
	
	if INPUT.UserInputType == Enum.UserInputType.MouseButton1 and not CARRYING and CARRY_OBJECT and CARRY_PART then
		--//Calculating if the player is close enough
		local CAM_POS = CURRENT_CAM.CFrame.Position
		local CARRY_PART_POS = CARRY_PART.Position
		
		local DISTANCE = (CAM_POS - CARRY_PART_POS).Magnitude
		
		if DISTANCE <= MIN_DISTANCE then
			--//Debounce
			CARRYING = true
			LAST_TICK = tick()
			
			local INITIAL_CAM_CFRAME = CURRENT_CAM.CFrame
			local INITIAL_PART_CFRAME = CARRY_PART.CFrame
			
			--//Fire event
			CARRY_EVENT:InvokeServer(true, CARRY_PART)
			
			--//Check if I need to apply force
			if not IS_BEING_CARRIED(CARRY_OBJECT) then
				--//Applying force
				ALIGN_POS.Parent = CARRY_PART
				ALIGN_ORIENTATION.Parent = CARRY_PART
				
				ALIGN_POS.Position = INITIAL_PART_CFRAME.Position
				ALIGN_ORIENTATION.CFrame = INITIAL_PART_CFRAME
				
				ALIGN_POS.Attachment0 = CARRY_PART.CarryPoint
				ALIGN_ORIENTATION.Attachment0 = CARRY_PART.CarryPoint
			end
			
			--//Main handler
			local NEW_THREAD
			NEW_THREAD = RunService.RenderStepped:Connect(function(dt)
				local NEW_CAM_POS = CURRENT_CAM.CFrame.Position
				local NEW_CARRY_PART_POS = CARRY_PART.Position

				local NEW_DISTANCE = (NEW_CAM_POS - NEW_CARRY_PART_POS).Magnitude
				
				if CARRYING and NEW_DISTANCE <= MAX_DISTANCE then
					local SCALED_FPS = dt*FPS_CAP
					
					local X_DELTA = 0
					local Y_DELTA = 0
					
					local CURRENT_CAM_CFRAME = CURRENT_CAM.CFrame
					
					--//Rotate handler
					if ROTATING then
						if UserInputService:IsKeyDown(KEYCODE.W) then
							X_DELTA = 10
						end
						if UserInputService:IsKeyDown(KEYCODE.S) then
							X_DELTA = -10
						end
						if UserInputService:IsKeyDown(KEYCODE.A) then
							Y_DELTA = 10
						end
						if UserInputService:IsKeyDown(KEYCODE.D) then
							Y_DELTA = -10
						end
					end
					
					INITIAL_CAM_CFRAME = INITIAL_CAM_CFRAME * CFrame.Angles(math.rad(X_DELTA * SCALED_FPS), math.rad(Y_DELTA * SCALED_FPS), 0)
					
					ALIGN_POS.Position = CURRENT_CAM_CFRAME.Position + CURRENT_CAM_CFRAME.LookVector * MIN_DISTANCE
					ALIGN_ORIENTATION.CFrame = CURRENT_CAM_CFRAME * INITIAL_CAM_CFRAME:ToObjectSpace(INITIAL_PART_CFRAME)
				else
					NEW_THREAD:Disconnect()
				end
			end)
		end
	end
	
	if INPUT.UserInputType == Enum.UserInputType.MouseButton2 and CARRYING then
		CONTROLS:Disable()
		ROTATING = true
	end
end)

--//Input ended
UserInputService.InputEnded:Connect(function(INPUT, CHATTING)
	--Not receiving inputs if the player is chatting
	if CHATTING then
		return
	end
	
	if INPUT.UserInputType == Enum.UserInputType.MouseButton1 and CARRYING then
		--//Debounce
		repeat
			task.wait()
		until tick() - LAST_TICK >= DEBOUNCE
		
		CONTROLS:Enable()
		ROTATING = false
		
		CARRYING = false
		
		ALIGN_POS.Parent = self
		ALIGN_ORIENTATION.Parent = self
		
		CARRY_EVENT:InvokeServer(false, CARRY_PART)
	end
	
	if INPUT.UserInputType == Enum.UserInputType.MouseButton2 then
		CONTROLS:Enable()
		ROTATING = false
	end
end)

