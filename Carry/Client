--//CLIENT//--

--//Settings
local MIN_DISTANCE = 6 --Pick up
local MAX_DISTANCE = 10 --The furthest can object be away
local FPS_CAP = 30

--//Services
local RunService = game["Run Service"]
local ReplicatedStorage = game.ReplicatedStorage
local ContextActionService = game.ContextActionService
local UserInputService = game.UserInputService
local Players = game.Players
local CURRENT_CAM = workspace.CurrentCamera

local EVENTS = ReplicatedStorage.Events

--//References
local self = script
local SELECTION = self.Selection:Clone()
SELECTION.Parent = CURRENT_CAM

local CARRY_EVENT = EVENTS.Carry

local ALIGN_POS = self.IsCarrying
local ALIGN_ORIENTATION = self.IsCarrying_Orientation

--//Player references
local LOCAL_PLAYER = Players.LocalPlayer
local PLAYER_SCRIPTS = LOCAL_PLAYER.PlayerScripts
local PLAYER_GUI = LOCAL_PLAYER.PlayerGui
local USER_INTERFACES = PLAYER_GUI:WaitForChild("UIs")

USER_INTERFACES.Enabled = true

local MOUSE = LOCAL_PLAYER:GetMouse()

--//Misc references
local CONTROLS = require(PLAYER_SCRIPTS:WaitForChild("PlayerModule")):GetControls()
local KEYCODE = Enum.KeyCode

-- Viewmodel references
local Viewmodel = ReplicatedStorage.Viewmodel
local Vm_Handle = Viewmodel["Right Arm"].Handle

--//Functions
function findCarriable(PART)
	local CURRENT = PART
	local CURRENT_COMMENT = PART

	local OBJ = nil
	local PRIMARY_PART = nil
	local OBJECT_COMMENT = nil
	local COMMENT = nil

	local function findComment(instance)
		return instance:GetAttribute("comment")
	end

	if findComment(PART) then
		COMMENT = findComment(PART)
		OBJECT_COMMENT = PART
	else
		while CURRENT_COMMENT do
			if CURRENT_COMMENT:IsA("Model") and findComment(CURRENT_COMMENT) then
				COMMENT = findComment(CURRENT_COMMENT)
				OBJECT_COMMENT = CURRENT_COMMENT
				
				--//Break if success
				break
			end

			-- Move up using CURRENT's ancestor
			CURRENT_COMMENT = CURRENT_COMMENT:FindFirstAncestorWhichIsA("Model")
		end
	end

	if PART:FindFirstChild("CarryPoint") then
		while CURRENT do
			if CURRENT:IsA("Model") then
				if CURRENT.PrimaryPart == PART then
					OBJ = CURRENT
					PRIMARY_PART = CURRENT.PrimaryPart
					break
				end
			end

			-- Move up using CURRENT's ancestor, not PART's
			CURRENT = CURRENT:FindFirstAncestorWhichIsA("Model")
		end

		if not OBJ then
			OBJ = PART
			PRIMARY_PART = PART
		end
	else
		while CURRENT do
			if CURRENT:IsA("Model") then
				if CURRENT.PrimaryPart and CURRENT.PrimaryPart:FindFirstChild("CarryPoint") then
					OBJ = CURRENT
					PRIMARY_PART = CURRENT.PrimaryPart
					break
				end
			end

			-- Move up using CURRENT's ancestor
			CURRENT = CURRENT:FindFirstAncestorWhichIsA("Model")
		end
	end

	return OBJ, PRIMARY_PART, COMMENT, OBJECT_COMMENT
end

--//Dragging references
local CARRY_OBJECT --> Model :: Part
local CARRY_PART --> CARRY_OBJECT --> PrimaryPart or itself
local COMMENT --> CARRY_OBJECT's comment :: string
local OBJECT_COMMENT

local CARRYING = false
local ROTATING = false

local LAST_CARRY_OBJECT

--//Timing references
local LAST_TICK = tick()
local DEBOUNCE = 0.1 --Preventing fling

--//Mouse icon change
function changeMouseIcon(id)
	if MOUSE.Icon ~= id then
		MOUSE.Icon = id
	end
end

function comment()
	--//Comment
	if COMMENT then
		if not USER_INTERFACES.desc.Visible or USER_INTERFACES.desc.Text ~= COMMENT then
			USER_INTERFACES.desc.Visible = true
			USER_INTERFACES.desc.Text = COMMENT
		end
	end
end

function removeComment()
	if USER_INTERFACES.desc.Visible then
		USER_INTERFACES.desc.Visible = false
	end
end

--//Highlighting carriable objects
function HIGHLIGHT()
	SELECTION.Adornee = CARRY_OBJECT
	LAST_CARRY_OBJECT = CARRY_OBJECT
end

--//Un-highlight
function UN_HIGHLIGHT()
	SELECTION.Adornee = nil
	LAST_CARRY_OBJECT = nil
end

function IS_BEING_CARRIED(obj)
	if obj:IsA("Model") then
		local primarypart = obj.PrimaryPart
		if primarypart:FindFirstChild("IsCarrying") then
			return true
		else
			return false
		end
	else
		if obj:FindFirstChild("IsCarrying") then
			return true
		else
			return false
		end
	end
end

function rotateStart()
	if CARRYING then
		CONTROLS:Disable()
		ROTATING = true
	end
end

function rotateEnd()
	CONTROLS:Enable()
	ROTATING = false
end

function dragStart()
	if not CARRYING and CARRY_OBJECT and CARRY_PART then
		--//Calculating if the player is close enough
		local CAM_POS = CURRENT_CAM.CFrame.Position
		local CARRY_PART_POS = CARRY_PART.Position

		local DISTANCE = (CAM_POS - CARRY_PART_POS).Magnitude

		if DISTANCE <= MIN_DISTANCE then
			--//Debounce
			CARRYING = true
			LAST_TICK = tick()

			local INITIAL_CAM_CFRAME = CURRENT_CAM.CFrame
			local INITIAL_PART_CFRAME = CARRY_PART.CFrame

			--//Fire event
			CARRY_EVENT:InvokeServer(true, CARRY_PART)

			--//Check if I need to apply force
			if not IS_BEING_CARRIED(CARRY_OBJECT) then
				--//Applying force
				ALIGN_POS.Parent = CARRY_PART
				ALIGN_ORIENTATION.Parent = CARRY_PART

				ALIGN_POS.Position = INITIAL_PART_CFRAME.Position
				ALIGN_ORIENTATION.CFrame = INITIAL_PART_CFRAME

				ALIGN_POS.Attachment0 = CARRY_PART.CarryPoint
				ALIGN_ORIENTATION.Attachment0 = CARRY_PART.CarryPoint
			end

			--//Main handler
			local NEW_THREAD
			NEW_THREAD = RunService.RenderStepped:Connect(function(dt)
				if CARRY_PART then
					local NEW_CAM_POS = CURRENT_CAM.CFrame.Position
					local NEW_CARRY_PART_POS = CARRY_PART.Position

					local NEW_DISTANCE = (NEW_CAM_POS - NEW_CARRY_PART_POS).Magnitude

					if CARRYING and NEW_DISTANCE <= MAX_DISTANCE then
						local SCALED_FPS = dt*FPS_CAP

						local X_DELTA = 0
						local Y_DELTA = 0

						local CURRENT_CAM_CFRAME = CURRENT_CAM.CFrame

						--//Rotate handler
						if ROTATING then
							if UserInputService:IsKeyDown(KEYCODE.W) then
								X_DELTA = 10
							end
							if UserInputService:IsKeyDown(KEYCODE.S) then
								X_DELTA = -10
							end
							if UserInputService:IsKeyDown(KEYCODE.A) then
								Y_DELTA = 10
							end
							if UserInputService:IsKeyDown(KEYCODE.D) then
								Y_DELTA = -10
							end
						end

						INITIAL_CAM_CFRAME = INITIAL_CAM_CFRAME * CFrame.Angles(math.rad(X_DELTA * SCALED_FPS), math.rad(Y_DELTA * SCALED_FPS), 0)

						ALIGN_POS.Position = CURRENT_CAM_CFRAME.Position + CURRENT_CAM_CFRAME.LookVector * MIN_DISTANCE
						ALIGN_ORIENTATION.CFrame = CURRENT_CAM_CFRAME * INITIAL_CAM_CFRAME:ToObjectSpace(INITIAL_PART_CFRAME)

						return
					end
				end

				--//Disconnect if fail
				NEW_THREAD:Disconnect()
				dragEnd()
			end)
		end
	end
end

function dragEnd()
	if CARRYING then
		--//Debounce
		repeat
			task.wait()
		until tick() - LAST_TICK >= DEBOUNCE

		rotateEnd()

		CARRYING = false

		ALIGN_POS.Parent = self
		ALIGN_ORIENTATION.Parent = self

		CARRY_EVENT:InvokeServer(false, CARRY_PART)
	end
end

function setCollisionGroup(part, collisionGroup)
	if part:IsA("Model") then
		for i, basepart in pairs(part:GetDescendants()) do
			if basepart:IsA("BasePart") and basepart.CollisionGroup ~= collisionGroup then
				basepart.CollisionGroup = collisionGroup
			end
		end 
	else
		part.CollisionGroup = collisionGroup
	end
end

function convertToTool()
	if CARRYING and CARRY_PART and CARRY_PART:GetAttribute("tool") then
		local toolHandle = CARRY_PART:FindFirstChild("Handle")

		-- Checking if the object has handle point
		-- This is for calculating offsets
		if toolHandle then
			local tool = CARRY_OBJECT
			local toolPart = CARRY_PART
			local archivedParent = tool.Parent
			local archivedScale
			
			if tool:IsA("Model") then
				archivedScale = tool:GetScale()
			else
				archivedScale = tool.Size
			end
			
			
			tool.Parent = Viewmodel --:: The carry object is currently in viewmodel

			-- Ending drag
			dragEnd()

			-- Creating tool instance
			local toolInstance = Instance.new("Tool")
			toolInstance.Name = tool.Name
			toolInstance.RequiresHandle = false
			toolInstance.CanBeDropped = false
			toolInstance.Parent = LOCAL_PLAYER.Backpack

			local Motor6D
			local equipEvent
			local unequipEvent
			local RenderStepped

			local function equip()
				-- Making viewmodel visible
				Viewmodel.Parent = CURRENT_CAM
				
				-- Scale down the model/part
				if tool:IsA("Model") then
					tool:ScaleTo(0.3)
				else
					tool.Size = archivedScale * 0.3
					toolHandle.Position*=0.3
				end
				
				-- Collision
				setCollisionGroup(tool, "Viewmodel")

				-- Creating weld
				Motor6D = Instance.new("Motor6D")
				Motor6D.Parent = Viewmodel["Right Arm"]
				Motor6D.Part0 = Viewmodel["Right Arm"]
				Motor6D.Part1 = toolPart
				Motor6D.C0 = Viewmodel["Right Arm"].CFrame:ToObjectSpace(Vm_Handle.WorldCFrame)
				Motor6D.C1 = Vm_Handle.WorldCFrame:ToObjectSpace(toolHandle.WorldCFrame)
				
				RenderStepped = RunService.RenderStepped:Connect(function()
					Viewmodel.CamPart.CFrame = CURRENT_CAM.CFrame
				end)
			end

			local function unequip()
				-- Clean up
				Motor6D:Destroy()
				RenderStepped:Disconnect()
				Viewmodel.Parent = ReplicatedStorage
			end

			equipEvent = toolInstance.Equipped:Connect(equip)
			unequipEvent = toolInstance.Unequipped:Connect(unequip)
		end
	end
end

--//Set mouse icon
UserInputService.MouseIcon = "rbxassetid://6001676828"

--Selection handler
coroutine.wrap(function()
	while RunService.RenderStepped:Wait() do
		if LOCAL_PLAYER.Character then
			if not CARRYING then
				local TARGET = MOUSE.Target
				local HIT = MOUSE.Hit

				if TARGET then
					--//If model is carriable
					CARRY_OBJECT, CARRY_PART, COMMENT, OBJECT_COMMENT = findCarriable(TARGET)

					if CARRY_OBJECT or COMMENT then
						--//Checking distance
						local ORIGIN
						
						if CARRY_PART then
							ORIGIN = CARRY_PART.Position
						else
							if OBJECT_COMMENT then
								if OBJECT_COMMENT:IsA("Model") then
									if OBJECT_COMMENT.PrimaryPart then
										ORIGIN = OBJECT_COMMENT.PrimaryPart.Position
									else
										ORIGIN = HIT.Position
									end
								else
									ORIGIN = OBJECT_COMMENT.Position
								end
							end
						end
						
						local DISTANCE = (ORIGIN - CURRENT_CAM.CFrame.Position).Magnitude

						if DISTANCE <= MIN_DISTANCE then
							--//Highlight
							if CARRY_OBJECT then
								if CARRY_OBJECT ~= LAST_CARRY_OBJECT then
									HIGHLIGHT()
								end

								--//Change mouse icon to open hand
								changeMouseIcon("rbxassetid://382763043")
							end

							--//Comment
							if COMMENT then
								--//Comment
								comment()
							end

							--[[ SUCCESS ]]
							continue
						end
					end
				end

				--[[ FAIL ]]
				--//Change mouse icon to default
				changeMouseIcon("rbxassetid://6001676828")

				--//Un-highlight
				removeComment()
				UN_HIGHLIGHT()
			else
				--//Change mouse icon to dragging hand
				changeMouseIcon("rbxassetid://382762994")

				removeComment()
			end
		end
	end
end)()


--//Input start
UserInputService.InputBegan:Connect(function(INPUT, CHATTING)
	--Not receiving inputs if the player is chatting
	if CHATTING then
		return
	end

	if INPUT.UserInputType == Enum.UserInputType.MouseButton1 then
		dragStart()
	end

	if INPUT.UserInputType == Enum.UserInputType.MouseButton2 then
		rotateStart()
	end

	if INPUT.KeyCode == Enum.KeyCode.E  then
		convertToTool()
	end
end) 
--//Input ended
UserInputService.InputEnded:Connect(function(INPUT, CHATTING)
	--Not receiving inputs if the player is chatting
	if CHATTING then
		return
	end

	if INPUT.UserInputType == Enum.UserInputType.MouseButton1 then
		dragEnd()
	end

	if INPUT.UserInputType == Enum.UserInputType.MouseButton2 then
		rotateEnd()
	end
end)
