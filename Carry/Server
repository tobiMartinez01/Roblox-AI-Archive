-- [[ SERVICES ]]
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Events = ReplicatedStorage.Events

-- [[ CALLS ]]
local Carry_Event = Events.Carry

-- [[ TABLES ]]
local INTERACTIONS = {
	Power = {"Plug", "Socket"}
}

-- [[ FUNCTIONS ]]
function isInteractable(OBJ1, OBJ2) -- 2 models --> interaction name
	for interactionName, interaction in pairs(INTERACTIONS) do
		if table.find(interaction, OBJ1.Name) and table.find(interaction, OBJ2.Name) then
			return interactionName
		end
	end
end

function hasInteraction(model) -- model --> interaction name
	for interactionName, interaction in pairs(INTERACTIONS) do
		if table.find(interaction, model.Name) then
			return interactionName
		end
	end

	return nil
end

function isBeingCarried(obj)
	if obj:IsA("Model") then
		local primarypart = obj.PrimaryPart
		if primarypart.CollisionGroup == "SelfUncollide" then
			return true
		else
			return false
		end
	else
		if obj.CollisionGroup == "SelfUncollide" then
			return true
		else
			return false
		end
	end
end

function setCollisionGroup(part, collisionGroup)
	if part:IsA("Model") then
		for i, basepart in pairs(part:GetDescendants()) do
			if basepart:IsA("BasePart") and basepart.CollisionGroup ~= collisionGroup then
				basepart.CollisionGroup = collisionGroup
			end
		end 
	else
		part.CollisionGroup = collisionGroup
	end
end

function SetNetworkOwner(obj, owner)
	if obj:IsA("Model") then
		for i, basepart in pairs(obj:GetDescendants()) do
			if basepart:IsA("BasePart") and basepart:GetNetworkOwner() ~= owner then
				basepart:SetNetworkOwner(owner)
			end
		end
	else
		obj:SetNetworkOwner(owner)
	end
end

function findModelByPrimaryPart(PrimaryPart)
	local CURRENT = PrimaryPart

	while CURRENT do
		-- Checking if current is a model and primary part exists
		if CURRENT:IsA("Model") and CURRENT.PrimaryPart then
			if CURRENT.PrimaryPart == PrimaryPart then
				return CURRENT
			end
		end

		-- Assign if fails
		CURRENT = CURRENT:FindFirstAncestorWhichIsA("Model")
	end

	return PrimaryPart
end

local function findInteractObject(obj) --:: Get InteractObject through part/model
	local current = obj

	while current do
		for i, dir in pairs(INTERACTIONS) do
			if table.find(dir, current.Name) then
				return current
			end
		end

		current = current:FindFirstAncestorWhichIsA("BasePart") or current:FindFirstAncestorWhichIsA("Model")
	end

	return nil
end

function getInteractObject(model) --:: Get InteractObject through touching parts
	local TouchingParts = {}

	for i, part in ipairs(model:GetDescendants()) do
		if part:IsA("BasePart") then
			for _, touchingPart in ipairs(part:GetTouchingParts()) do
				if touchingPart:IsDescendantOf(model) then 
					continue 
				end

				table.insert(TouchingParts, touchingPart)
			end
		end
	end

	local InteractObject

	if #TouchingParts > 0 then	
		-- Getting InteractObject
		for i, part in ipairs(TouchingParts) do
			InteractObject = findInteractObject(part)
			if InteractObject then break end
		end
	end

	return InteractObject
end

function setUp(model)
	local interactionName = hasInteraction(model)

	if interactionName == "Power" then
		-- Get touching parts
		local InteractObject = getInteractObject(model) --:: Object thats interactable with model

		if InteractObject then
			local INTERACTION = isInteractable(model, InteractObject)

			-- Plug 'n Socket
			if INTERACTION then
				if INTERACTION == "Power" then
					local nearestSocket
					local nearestDistance = math.huge

					for i, socket in pairs(InteractObject.PrimaryPart:GetChildren()) do
						if socket:IsA("Attachment") then
							local Distance = (model.PrimaryPart.Position - socket.WorldPosition).Magnitude
							if nearestDistance > Distance then
								nearestSocket = socket
								nearestDistance = Distance
							end
						end
					end

					model.PrimaryPart.Anchored = true
					model:SetPrimaryPartCFrame(nearestSocket.WorldCFrame)

					local Connect = model:FindFirstChildWhichIsA("ObjectValue")
					if Connect then
						local linkedObject = Connect.Value
						linkedObject:SetAttribute("Powered", true)
					else
						error("No connection")
					end
				end

				return true
			end
		end
	end
end

function cleanUp(model)
	local interactionName = hasInteraction(model)

	-- Plug 'n Socket
	if interactionName == "Power" then
		local Connect = model:FindFirstChildWhichIsA("ObjectValue")

		-- Disconnect
		if Connect then
			local linkedObject = Connect.Value --:: any electrical objects
			linkedObject:SetAttribute("Powered", false)
		else
			error("No connection")
		end
	end
end

Carry_Event.OnServerInvoke = function(PLR, IS_CARRYING, CARRY_PART)
	-- Carrying
	local CARRY_MODEL = findModelByPrimaryPart(CARRY_PART)

	if IS_CARRYING and not isBeingCarried(CARRY_MODEL) then
		print(CARRY_MODEL)
		
		-- Set collision
		setCollisionGroup(CARRY_MODEL, "SelfUncollide")

		-- Make the object to be draggable
		CARRY_PART.Anchored = false

		-- Network handler
		SetNetworkOwner(CARRY_MODEL, PLR)

		-- Clean up interaction
		cleanUp(CARRY_MODEL)
	else
		-- Carrying ended

		-- Set collision
		setCollisionGroup(CARRY_MODEL, "Default")

		-- Set up interaction
		local INTERACTED = setUp(CARRY_MODEL)

		-- Network handler
		if not INTERACTED then
			coroutine.wrap(function()
				--local checkpoint = tick()
				while task.wait(0.2) do
					local velocity = CARRY_PART.Velocity.Magnitude
					--If lag detector not work then use "tick() - checkpoint >= 5" as a timeout
					if (velocity < 0.01 and CARRY_PART.CollisionGroup == "Default") or CARRY_PART.CollisionGroup == "SelfUncollide" then
						--Check if Object is currently not being holding then set it back to server-side
						if CARRY_PART.CollisionGroup == "Default" then
							SetNetworkOwner(CARRY_MODEL, nil)
						end

						break
					end
				end
			end)()
		end
	end
end
