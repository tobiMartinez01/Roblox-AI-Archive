--Client
local self = script.Parent
local events = game.ReplicatedStorage.Events
local carry_event = events.Carry

local UIS = game:GetService("UserInputService")
local localPlayer = game.Players.LocalPlayer
local CurrentCamera = workspace.CurrentCamera
local mouse = localPlayer:GetMouse()
local RunService = game:GetService("RunService")
local Controls = require(localPlayer.PlayerScripts:WaitForChild("PlayerModule")):GetControls()

local CarryPoint
local AlignPosition
local Object

local limitDistance = 6

local function findCarriableAncestor(target)
	local current = target
	while current do
		if current:IsA("BasePart") then
			if current:FindFirstChild("CarryPoint") then
				if current:FindFirstChild("CarryPoint"):IsA("Attachment") then
					CarryPoint = current:FindFirstChild("CarryPoint")
					return current
				else
					warn("CarryPoint must be an Attachment!")
					return nil
				end
			end
		elseif current:IsA("Model") then
			local primarypart = current.PrimaryPart
			if primarypart then
				if primarypart:FindFirstChild("CarryPoint") then
					if primarypart:FindFirstChild("CarryPoint"):IsA("Attachment") then
						CarryPoint = primarypart:FindFirstChild("CarryPoint")
						return current
					else
						warn("CarryPoint must be an Attachment!")
						return nil
					end
				end
			end
		end
		current = current.Parent
	end
	return nil
end

local function Carrying(Object)
	if Object:IsA("Model") then
		if Object.PrimaryPart.CollisionGroup == "SelfUncollide" then
			return true
		else
			return false
		end
	else
		if Object.CollisionGroup == "SelfUncollide" then
			return true
		else
			return false
		end
	end
end

local IsCarrying = false
local IsRotating = false

UIS.InputBegan:Connect(function(input, isChatting)
	if isChatting then return end
	if input.UserInputType == Enum.UserInputType.MouseButton1 and Object == nil then
		local Target = mouse.Target
		Object = findCarriableAncestor(Target)
		if Object then
			if Carrying(Object) == false then
				IsCarrying = true
				local initialCameraCFrame = CurrentCamera.CFrame
				local initialOrientation
				if Object:IsA("Model") then
					initialOrientation = Object.PrimaryPart.CFrame
				else
					initialOrientation = Object.CFrame
				end
				local drag; drag = RunService.Heartbeat:Connect(function()
					if IsCarrying then
						local delta_X = 0
						local delta_Y = 0
						local camCFrame = CurrentCamera.CFrame
						if IsRotating == true then
							if UIS:IsKeyDown(Enum.KeyCode.W) then
								delta_X=10
							end
							if UIS:IsKeyDown(Enum.KeyCode.S) then
								delta_X=-10
							end
							if UIS:IsKeyDown(Enum.KeyCode.A) then
								delta_Y=10
							end
							if UIS:IsKeyDown(Enum.KeyCode.D) then
								delta_Y=-10
							end
						end
						initialCameraCFrame = initialCameraCFrame * CFrame.Angles(math.rad(delta_X), math.rad(delta_Y), 0)
						carry_event:InvokeServer(true, Object, camCFrame, initialCameraCFrame, initialOrientation)
					else
						drag:Disconnect()
					end
				end)
			end
		end
	end

	if input.UserInputType == Enum.UserInputType.MouseButton2 and Object then
		Controls:Disable()
		IsRotating = true
	end
end)

UIS.InputEnded:Connect(function(input, isChatting)
	if isChatting then return end
	if input.UserInputType == Enum.UserInputType.MouseButton1 and Object then 
		IsCarrying = false
		carry_event:InvokeServer(false, Object, camCFrame)
		Object = nil
	end

	if input.UserInputType == Enum.UserInputType.MouseButton2 then
		Controls:Enable()
		IsRotating = false
	end
end)
