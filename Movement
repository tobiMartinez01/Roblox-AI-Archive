-- Services
local RUNSERVICE = game:GetService("RunService")
local PLAYER_SERVICE = game:GetService("Players")
local UIS = game:GetService("UserInputService")

-- Client
local PLAYER = PLAYER_SERVICE.LocalPlayer
local CAMERA = workspace.CurrentCamera

--Params
local WALK_SPEED = 16
local SPRINT_SPEED = 25
local SPRINT_ACCEL = 0.5 --seconds

-- Variables
local IS_SPRINTING = false
local ELAPSED_TIME = 0

local sin = math.sin
local cos = math.cos

-- Graphs
local SPRINT_GRAPH = require(script.Acceleration)

-- Functions
local function Lerp(num, goal, i)
	return num + (goal-num)*i
end

-- Character
local CHARACTER = nil
local VectorForce

PLAYER.CharacterAdded:Connect(function(character)
	CHARACTER = character

	local HRP = CHARACTER.HumanoidRootPart

	-- Gravity related
	if not CHARACTER:FindFirstChild("Anti_Gravity") then
		-- Changing gravity
		VectorForce = Instance.new("VectorForce")
		VectorForce.Name = "Anti_Gravity"
		VectorForce.Parent = CHARACTER

		VectorForce.ApplyAtCenterOfMass = true
		VectorForce.Attachment0 = HRP.RootAttachment
		VectorForce.Force = Vector3.new(0, HRP:GetMass() * 650, 0)
	end
end)


-- Sprinting
UIS.InputBegan:Connect(function(INPUT, CHATTING)
	-- No chatting check
	if CHATTING then
		return
	end

	-- Input
	if INPUT.KeyCode == Enum.KeyCode.LeftShift then
		-- Variables
		local INITIAL_TICK = tick()
		local INITIAL_WALKSPEED = CHARACTER.Humanoid.WalkSpeed
		local ELAPSED_TIME = 0

		IS_SPRINTING = not IS_SPRINTING
		local IS_SPRINTING_CHECK = IS_SPRINTING

		-- Acceleration
		coroutine.wrap(function()
			while (ELAPSED_TIME < SPRINT_ACCEL) and IS_SPRINTING_CHECK == IS_SPRINTING do
				ELAPSED_TIME = tick() - INITIAL_TICK 
				local PROGRESS = ELAPSED_TIME / SPRINT_ACCEL

				if IS_SPRINTING then
					CHARACTER.Humanoid.WalkSpeed = Lerp(INITIAL_WALKSPEED, SPRINT_SPEED, SPRINT_GRAPH:Get(PROGRESS))
				else
					CHARACTER.Humanoid.WalkSpeed = Lerp(INITIAL_WALKSPEED, WALK_SPEED, SPRINT_GRAPH:Get(PROGRESS))
				end

				RUNSERVICE.Heartbeat:Wait()
			end
		end)()
	end
end)

--// Viewbobbing
-- Variables
local TweenService = game:GetService("TweenService")

local IDLE_INTENSITY = 0.25
local IDLE_VELOCITY = .25 --# 2 cycles/s => 4*pi

local INTENSITY = 0.5
local VELOCITY = 0.75 --# 2 cycles/s => 4*pi

local BOBBING_X = 0
local BOBBING_Y = 0

local smoothDuration = 1
local starttime = 0

RUNSERVICE.RenderStepped:Connect(function(DT)
	if CHARACTER then
		local HRP = CHARACTER.HumanoidRootPart
		
		--  Variables
		local intensity
		local velocity

		--# Calculating intensity and velocity
		-- Checking if character is moving or not
		if CHARACTER.Humanoid.MoveDirection.Magnitude > 0 and CHARACTER.Humanoid:GetState() ~= Enum.HumanoidStateType.Freefall then
			-- Getting intensity and velocity according to player's walkspeed
			local ratio
			if IS_SPRINTING then
				ratio = SPRINT_SPEED/10
			else
				ratio = WALK_SPEED/10
			end

			intensity = 0.5 * ratio
			velocity = 0.75 * ratio
		else
			intensity = IDLE_INTENSITY
			velocity = IDLE_VELOCITY
		end

		-- Bobbing equations
		local t = tick()
		local x_equation = sin(t * (velocity*2*math.pi)) * intensity
		local y_equation = math.abs(sin(t * (velocity*2*math.pi) + math.pi/2) * intensity * 0.5) - intensity * 0.5

		local target_offset = Vector3.new(x_equation, y_equation, 0)

		-- Lerp
		local alpha = TweenService:GetValue(math.min((t - starttime) / smoothDuration, 1), Enum.EasingStyle.Back, Enum.EasingDirection.Out)
		CHARACTER.Humanoid.CameraOffset = CHARACTER.Humanoid.CameraOffset:Lerp(target_offset, alpha)

		--print(alpha)

		starttime = tick()
	end
end)
