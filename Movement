-- Services
local RUNSERVICE = game:GetService("RunService")
local PLAYER_SERVICE = game:GetService("Players")
local UIS = game:GetService("UserInputService")

-- Client
local PLAYER = PLAYER_SERVICE.LocalPlayer
local CAMERA = workspace.CurrentCamera

--Params
local WALK_SPEED = 16
local SPRINT_SPEED = 25
local SPRINT_ACCEL = 0.5 --seconds

-- Variables
local IS_SPRINTING = false
local ELAPSED_TIME = 0

local sin = math.sin
local cos = math.cos

-- Graphs
local SPRINT_GRAPH = require(script.Acceleration)

-- Functions
local function Lerp(num, goal, i)
	return num + (goal-num)*i
end

-- Character
local CHARACTER = nil
local VectorForce

PLAYER.CharacterAdded:Connect(function(character)
	CHARACTER = character

	local HRP = CHARACTER.HumanoidRootPart

	---- Gravity related
	--if not CHARACTER:FindFirstChild("Anti_Gravity") then
	--	-- Changing gravity
	--	VectorForce = Instance.new("VectorForce")
	--	VectorForce.Name = "Anti_Gravity"
	--	VectorForce.Parent = CHARACTER

	--	VectorForce.ApplyAtCenterOfMass = true
	--	VectorForce.Attachment0 = HRP.RootAttachment
	--	VectorForce.Force = Vector3.new(0, HRP:GetMass() * 650, 0)
	--end
end)


-- Sprinting
UIS.InputBegan:Connect(function(INPUT, CHATTING)
	-- No chatting check
	if CHATTING then
		return
	end

	-- Input
	if INPUT.KeyCode == Enum.KeyCode.LeftShift then
		-- Variables
		local INITIAL_TICK = tick()
		local INITIAL_WALKSPEED = CHARACTER.Humanoid.WalkSpeed
		local ELAPSED_TIME = 0

		IS_SPRINTING = not IS_SPRINTING
		local IS_SPRINTING_CHECK = IS_SPRINTING

		-- Acceleration
		coroutine.wrap(function()
			while (ELAPSED_TIME < SPRINT_ACCEL) and IS_SPRINTING_CHECK == IS_SPRINTING do
				ELAPSED_TIME = tick() - INITIAL_TICK 
				local PROGRESS = ELAPSED_TIME / SPRINT_ACCEL

				if IS_SPRINTING then
					CHARACTER.Humanoid.WalkSpeed = Lerp(INITIAL_WALKSPEED, SPRINT_SPEED, SPRINT_GRAPH:Get(PROGRESS))
				else
					CHARACTER.Humanoid.WalkSpeed = Lerp(INITIAL_WALKSPEED, WALK_SPEED, SPRINT_GRAPH:Get(PROGRESS))
				end

				RUNSERVICE.Heartbeat:Wait()
			end
		end)()
	end
end)
