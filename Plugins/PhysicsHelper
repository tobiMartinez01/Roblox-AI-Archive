local toolbar = plugin:CreateToolbar('Physics Helper')

--Detect product version
local IsLocal = if string.find(plugin.Name, ".rbxm") or string.find(plugin.Name, ".lua") then true else false
local localStorage = workspace.Camera

local openUI
if IsLocal then
	openUI = toolbar:CreateButton("Physics Helper (Debug)", "Open the UI", "rbxassetid://10537616254")
else
	openUI = toolbar:CreateButton("Physics Helper", "Open the UI", "rbxassetid://18406094706")
end
openUI.ClickableWhenViewportHidden = true

--Client signal
local userID = game:GetService("StudioService"):GetUserId()
local user = game.Players:GetPlayerByUserId(userID)

local uiProperties = DockWidgetPluginGuiInfo.new(
	Enum.InitialDockState.Float, -- Default docking state
	false,  -- Don't override previous session state
	false,  -- Initially disabled
	350,    -- Min Width
	500,    -- Min Height
	350,    -- Default Width
	500     -- Default Height
)

local widget = plugin:CreateDockWidgetPluginGui(
	"Physics Oddyssey Widget!!",
	uiProperties
)
widget.Title = 'PhysicsHelper'
widget.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

--Create UIs / Functions
local changeHistory = game:GetService("ChangeHistoryService")
local selection = game:GetService("Selection")
local TweenService = game.TweenService

--Getting contents
local ui = script.Parent.ui
local content = ui.content
ui.Parent = widget

local canBeCarried = content.canbecarried
local modelweld = content.weld

--Getting CoreGui
for i, prompt in pairs(game.CoreGui:GetChildren()) do
	if prompt.Name == "PrimaryPartPrompt" then
		prompt:Destroy()
	end 
end
local viewable = Instance.new("ScreenGui", game.CoreGui)
viewable.IgnoreGuiInset = true
viewable.Name = "PrimaryPartPrompt"

--Variables
local checkbox_state
local errors = {}

--Checkbox ImageIDs
local checkbox = {
	indetermined_checkbox = {
		id = "rbxassetid://8445519147",
		offset = Vector2.new(4, 732)
	},
	blank_checkbox = {
		id = "rbxassetid://8445519745",
		offset = Vector2.new(940, 784)
	},
	checked_checkbox = {
		id = "rbxassetid://8445519745",
		offset = Vector2.new(4, 836)
	}
}

--Set waypoints to undo/redo
local function setWaypoint(desc)
	changeHistory:SetWaypoint(desc)
end

--Find CanBeCarried
local function findCarriableAncestor(target)
	local current = target
	while current do
		if current:IsA("BasePart") then
			if current:FindFirstChild("CarryPoint") then
				if current:FindFirstChild("CarryPoint"):IsA("Attachment") then
					return true
				else
					warn("CarryPoint must be an Attachment!")
					return false
				end
			end
		elseif current:IsA("Model") then
			local primarypart = current.PrimaryPart
			if primarypart then
				if primarypart:FindFirstChild("CarryPoint") then
					if primarypart:FindFirstChild("CarryPoint"):IsA("Attachment") then
						return true
					else
						warn("CarryPoint must be an Attachment!")
						return false
					end
				end
			end
		end
		current = current.Parent
	end
	return false
end

--Model weld
local function clearweld(model)
	for i, v1 in pairs(model:GetDescendants()) do
		if v1:IsA("BasePart") then
			v1.Anchored = true
		elseif v1:IsA("Weld") or v1:IsA("WeldConstraint") then
			v1:Destroy()
		end
	end
end

local function modelWeld(model)
	clearweld(model)
	for i, v1 in pairs(model:GetDescendants()) do
		if v1:IsA("BasePart") then 
			if v1 ~= model.PrimaryPart then
				local position = v1.Position
				local rotation = v1.Orientation
				local weld = Instance.new("WeldConstraint", v1)
				weld.Part0 = model.PrimaryPart
				weld.Part1 = v1
				v1.Anchored = false
				v1.Position = position
				v1.Orientation = rotation
			else
				v1.Anchored = true 
			end
		end 
	end
end

--Calling prompt
local primaryPartPrompt = ui.warning
local primaryPartPrompt_appear = TweenService:Create(primaryPartPrompt, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {GroupTransparency = 0})
local primaryPartPrompt_disappear = TweenService:Create(primaryPartPrompt, TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), {GroupTransparency = 1})
--Calling threads
local primaryPartThread
local closingThread
local skipPrompt

local function showPrompt(title, desc)
	--Set up
	primaryPartPrompt.GroupTransparency = 1
	primaryPartPrompt.Visible = true
	
	--Override prompt title and description
	primaryPartPrompt.title.Text = title
	primaryPartPrompt.desc.Text = desc
	
	primaryPartPrompt_appear:Play()
	
	task.wait(5)

	primaryPartPrompt_disappear:Play()

	task.wait(0.5)

	primaryPartPrompt.Visible = false
	closingThread = nil
end

local function resetPrompt()
	--Closing threads and functions
	
	if primaryPartThread then
		coroutine.close(primaryPartThread)
		primaryPartThread = nil
	end
	
	if closingThread then
		coroutine.close(closingThread)
		closingThread = nil
	end
	
	if skipPrompt then
		skipPrompt:Disconnect()
	end
end

local function primaryPart_popup()
	--Fadde after ~5 seconds
	closingThread = coroutine.create(showPrompt)
	
	coroutine.resume(closingThread, "Model(s) is missing PrimaryPart", "Please set PrimaryPart to the models")
	
	--Skip the prompt
	skipPrompt = primaryPartPrompt.button.MouseButton1Click:Connect(function()
		primaryPartPrompt_disappear:Play()
		resetPrompt()
	end)
	primaryPartThread = nil
end

local function primaryPartPrompt()
	--Reset the prompt
	resetPrompt()
	--Select malfunctioned models
	selection:Set(errors)
	--Create new thread
	primaryPartThread = coroutine.create(primaryPart_popup)
	coroutine.resume(primaryPartThread)
end

--Selection refresh
local function selectFunction()
	local selectedItems = selection:Get()
	--Get CanBeCarried to determine checkbox state
	local carriedTrue = 0
	local carriedFalse = 0
	for i, item in ipairs(selectedItems) do
		if findCarriableAncestor(item) then
			carriedTrue+=1
		else
			carriedFalse+=1
		end
	end
	-- true,  false, indetermined
	if carriedTrue > 0 and carriedFalse == 0 then
		canBeCarried.button.Image = checkbox.checked_checkbox.id
		canBeCarried.button.ImageRectOffset = checkbox.checked_checkbox.offset 
		checkbox_state = true
	elseif carriedFalse > 0 and carriedTrue == 0 then
		canBeCarried.button.Image = checkbox.blank_checkbox.id
		canBeCarried.button.ImageRectOffset = checkbox.blank_checkbox.offset
		checkbox_state = false
	elseif carriedFalse > 0 and carriedTrue > 0 then
		canBeCarried.button.Image = checkbox.indetermined_checkbox.id
		canBeCarried.button.ImageRectOffset = checkbox.indetermined_checkbox.offset
		checkbox_state = nil
	else
		canBeCarried.button.Image = ""
		checkbox_state = nil
	end
end

selection.SelectionChanged:Connect(function()
	selectFunction()
end)

--Buttons function

--Toggle CanBeCarried
canBeCarried.button.MouseButton1Click:Connect(function()
	errors = {}
	local selectedItems = selection:Get()
	for i, item in ipairs(selectedItems) do
		if not checkbox_state then
			if item:IsA("BasePart") then
				local CarryPoint = Instance.new("Attachment", item)
				CarryPoint.Name = "CarryPoint"
			end
			
			if item:IsA("Model") then
				if item.PrimaryPart then
					modelWeld(item)
					local CarryPoint = Instance.new("Attachment", item.PrimaryPart)
					CarryPoint.Name = "CarryPoint"
				else
					table.insert(errors, item)
				end
			end
		else
			if item:IsA("BasePart") or item:IsA("Model") then
				clearweld(item)
			end
			
			for i, instance in pairs(item:GetDescendants()) do
				if instance.Name == "CarryPoint" and instance:IsA("Attachment") then
					instance:Destroy()
				end
			end
		end
	end

	if #errors > 0 then
		primaryPartPrompt()
	else
		selectFunction()
	end
end)

--Model weld
modelweld.Weld.MouseButton1Click:Connect(function()
	errors = {}
	local selectedItems = selection:Get()
	for i, model in pairs(selectedItems) do
		if model:IsA("Model") then
			if model.PrimaryPart then
				modelWeld(model)
			else
				table.insert(errors, model)
			end
		end
	end
	
	if #errors > 0 then
		primaryPartPrompt()
	else
		selectFunction()
	end
end)

modelweld.Clear.MouseButton1Click:Connect(function()
	local selectedItems = selection:Get()
	for i, model in pairs(selectedItems) do
		if model:IsA("Model") then
			clearweld(model)
		end
	end
end)

--Visuals

--PathModifiers
local pathmodifiers = content.pathmodifiers
local pathmodifiersEnabled = false

local pathmodifiers_properties = {}

--Storage
local pathmodifiers_temp = localStorage:FindFirstChild("PathModifiers_Normals") or Instance.new("Folder", localStorage)
pathmodifiers_temp.Name = "PathModifiers_Normals"
pathmodifiers_temp.Archivable = false

local function createSurfaceUI(part, color, face)
	local surfaceUI = Instance.new("SurfaceGui", pathmodifiers_temp)
	surfaceUI.Name = "Normal"
	surfaceUI.Archivable = false
	surfaceUI.Adornee = part
	surfaceUI.Face = face
	surfaceUI.AlwaysOnTop = false

	surfaceUI.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

	surfaceUI.LightInfluence = 0
	surfaceUI.Brightness = 1

	local imageButton = Instance.new("ImageButton", surfaceUI)
	imageButton.Archivable = false
	imageButton.Size = UDim2.new(1, 0, 1, 0)

	imageButton.BackgroundColor3 = color
	imageButton.BackgroundTransparency = 0.75
	imageButton.ImageTransparency = 1
end

local function createNormal(part, color)
	createSurfaceUI(part, color, Enum.NormalId.Front)
	createSurfaceUI(part, color, Enum.NormalId.Back)
	createSurfaceUI(part, color, Enum.NormalId.Left)
	createSurfaceUI(part, color, Enum.NormalId.Right)
	createSurfaceUI(part, color, Enum.NormalId.Top)
	createSurfaceUI(part, color, Enum.NormalId.Bottom)
end

local pathmodifiers_auto

pathmodifiers.button.MouseButton1Click:Connect(function()
	--Toggle
	pathmodifiersEnabled = not pathmodifiersEnabled
	
	--Processing
	if pathmodifiersEnabled then
		pathmodifiers.button.Image = checkbox.checked_checkbox.id
		pathmodifiers.button.ImageRectOffset = checkbox.checked_checkbox.offset 
		--Show path modifiers
		for i, instance in pairs(workspace:GetDescendants()) do
			if instance:IsA("BasePart") then
				local pathmodifier = instance:FindFirstChildWhichIsA("PathfindingModifier")
				if pathmodifier then
					if pathmodifier.PassThrough == false then
						createNormal(instance, Color3.fromRGB(255, 0, 0))
					else
						createNormal(instance, Color3.fromRGB(150, 255, 0))
					end
				end
			end
		end
		
		pathmodifiers_auto = workspace.DescendantAdded:Connect(function(pathmodifier)
			if pathmodifier:IsA("PathfindingModifier") then
				local part = pathmodifier:FindFirstAncestorWhichIsA("BasePart")
				if pathmodifier then
					if pathmodifier.PassThrough == false then
						createNormal(part, Color3.fromRGB(255, 0, 0))
					else
						createNormal(part, Color3.fromRGB(150, 255, 0))
					end
				end
			end
		end)
	else
		pathmodifiers_auto:Disconnect()
		pathmodifiers.button.Image = checkbox.blank_checkbox.id
		pathmodifiers.button.ImageRectOffset = checkbox.blank_checkbox.offset
		--Hide path modifiers
		for i, surfaceUI in pairs(pathmodifiers_temp:GetChildren()) do
			if surfaceUI:IsA("SurfaceGui") then
				surfaceUI:Destroy()
			end
		end
	end
end)

--Open/Close
openUI.Click:Connect(function()
	widget.Enabled = not widget.Enabled
	viewable.Enabled = widget.Enabled 
end)
