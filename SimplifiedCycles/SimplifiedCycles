local agent = {}
agent.__index = agent

--Services
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local PathFindingService = game:GetService("PathfindingService")

local ServerStorage = game:GetService("ServerStorage")

--Modules
local NoobPath = require(ServerStorage.NoobPath)

function agent.new(character, costs)
	local newAgent = {
		events = {
			Reached = Instance.new("BindableEvent"),
			Next = Instance.new("BindableEvent")
		},
		connections = {}
	}

	--Asign a new metatable to agent
	local self = setmetatable(newAgent, agent)

	--Variables
	self.Character = character
	self.Reached = self.events.Reached.Event
	self.Next = self.events.Next.Event

	--Creating NoobPath
	for i, bodypart in pairs(character:GetDescendants()) do
		if bodypart:IsA("BasePart") then
			bodypart:SetNetworkOwner(nil)
		end
	end

	local pathParams = {
		AgentHeight = character:GetExtentsSize().Y,
		AgentCanJump = true,
		AgentCanClimb = true,
		Costs = costs,
		PathSettings = {
			SupportPartialPath = true
		}
	}

	self.Path = NoobPath.Humanoid(character, pathParams)

	--Jump mechanic
	local humanoid = character.Humanoid
	local hrp = character.HumanoidRootPart

	coroutine.wrap(function()
		while RunService.Heartbeat:Wait(0.5) do
			if humanoid:GetState() ~= Enum.HumanoidStateType.Climbing and not self.Path.Idle then
				local origin = CFrame.new(hrp.Position + (hrp.CFrame.LookVector * (hrp.Size.Z / 2)))
				local size = Vector3.new(0.1, hrp.Size.Y, 0.1)

				local overlap = OverlapParams.new()
				overlap.RespectCanCollide = true
				overlap.FilterType = Enum.RaycastFilterType.Exclude
				overlap.FilterDescendantsInstances = {character}

				local obstacle = workspace:GetPartBoundsInBox(origin, size, overlap)

				for i, part in pairs(obstacle) do
					if not part:FindFirstAncestorWhichIsA('Model'):FindFirstChild("Humanoid") then
						if part.ClassName ~= "TrussPart" then
							if part.Transparency ~= 1 then
								local sides = {
									front = part.CFrame.LookVector * (part.Size.Z / 2)+part.Position,
									back = -part.CFrame.LookVector * (part.Size.Z / 2)+part.Position,
									right = part.CFrame.RightVector * (part.Size.X / 2)+part.Position,
									left = -part.CFrame.RightVector * (part.Size.X / 2)+part.Position,
									up = part.CFrame.UpVector * (part.Size.Y / 2)+part.Position,
									down = -part.CFrame.UpVector * (part.Size.Y / 2)+part.Position,
								}

								local highestSurface = nil
								local highestY = -math.huge  -- Start with a very low value to ensure any surface is higher

								for side, position in pairs(sides) do
									if position.Y > highestY then
										highestY = position.Y
										highestSurface = side
									end
								end

								if (humanoid.JumpPower^2 / (workspace.Gravity * 2)) >= (highestY - hrp.Position.Y) then
									humanoid.Jump = true
								end
							end
						end
					end
				end
			end
		end
	end)()

	return self
end

function sortTable(table_)
	table.sort(table_, function(a, b)
		return tonumber(a.Name) < tonumber(b.Name)
	end)
end

function importWaypoints(table_)
	local sendData = {}

	--Inserting waypoints to sendData
	for i, waypoint in ipairs(table_:GetChildren()) do
		if waypoint:IsA("BasePart") then
			table.insert(sendData, waypoint)
		end
	end

	--Sort waypoints
	sortTable(sendData)

	return sendData
end

function disconnectAll(self)
	print(self.Character.Name, "disconnected", self.connections)
	for i, connection in pairs(self.connections) do
		if connection then
			connection:Disconnect()
		end
	end
end

function agent:Run(waypoints, UPPER_PATH, SUB_PATH)
	--//Character variables
	local CHARACTER = self.Character
	local HRP = CHARACTER.HumanoidRootPart
	local HUMANOID = CHARACTER.Humanoid
	local ANIMATOR = HUMANOID.Animator

	--//Importing waypoints
	local pathWaypoints = importWaypoints(waypoints)
	local path = self.Path

	--//Saving main path
	if not self.MainPath then
		self.MainPath = waypoints
	end

	--//Indexes
	local CURRENT_INDEX = 1
	local LAST_INDEX = nil
	local FINISHED = 0

	local UPPER_CURRENT_INDEX
	local UPPER_LAST_INDEX
	local UPPER_FINISHED

	--//Saving Upper path
	if UPPER_PATH then
		UPPER_CURRENT_INDEX = UPPER_PATH.CURRENT_INDEX
		UPPER_LAST_INDEX = UPPER_PATH.LAST_INDEX
		UPPER_FINISHED = UPPER_PATH.FINISHED
	end

	--//Restoring from sub path
	if SUB_PATH then
		CURRENT_INDEX = SUB_PATH.CURRENT_INDEX
		LAST_INDEX = SUB_PATH.LAST_INDEX
		FINISHED = SUB_PATH.FINISHED
	end

	local function findNextIndex()
		--//Finding next index for next waypoint
		LAST_INDEX = CURRENT_INDEX

		local REACHED_WAYPOINT = pathWaypoints[LAST_INDEX]

		if REACHED_WAYPOINT then
			REACHED_WAYPOINT:SetAttribute("Unavailable", nil)
			self.Debounce = REACHED_WAYPOINT:GetAttribute("Debounce")
			self.Randomized = REACHED_WAYPOINT:GetAttribute("Randomized")
		end

		--//Finding next index
		if self.Randomized then
			repeat 
				CURRENT_INDEX = math.random(1, #pathWaypoints)
			until (#pathWaypoints < 2 or CURRENT_INDEX ~= LAST_INDEX) and not pathWaypoints[CURRENT_INDEX]:GetAttribute("Unavailable") 
		else
			CURRENT_INDEX = CURRENT_INDEX % #pathWaypoints + 1
		end

		local IMCOMING_WAYPOINT = pathWaypoints[CURRENT_INDEX]
		IMCOMING_WAYPOINT:SetAttribute("Unavailable", true)
	end

	local function walk()
		local function reached()
			FINISHED+=1
			local REACHED_WAYPOINT = pathWaypoints[CURRENT_INDEX]
			findNextIndex()
			disconnectAll(self)

			local ATTACHMENT = REACHED_WAYPOINT:FindFirstChildWhichIsA("Attachment")

			if ATTACHMENT then
				--//Make the character to look at a certain direction
				local ORIGIN = REACHED_WAYPOINT.Position * Vector3.new(1, 0, 1) + HRP.Position * Vector3.new(0, 1, 0)
				local LOOK_AT = ATTACHMENT.WorldCFrame.Position * Vector3.new(1, 0, 1) + HRP.Position * Vector3.new(0, 1, 0)

				--//Make sure the NPC isn't on air, climbing or moving (completely idle)
				repeat 
					RunService.Heartbeat:Wait()
				until HUMANOID:GetState() ~= Enum.HumanoidStateType.Climbing and HUMANOID:GetState() ~= Enum.HumanoidStateType.Jumping and HUMANOID:GetState() ~= Enum.HumanoidStateType.Freefall and HUMANOID.FloorMaterial ~= Enum.Material.Air and HRP.Velocity.Magnitude < 0.01 and path.Idle

				--//Preventing flinging or getting disturbed by any means
				HRP.Anchored = true

				--//Tweening
				local TWEEN_INFO = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection. InOut)
				local LOOKTWEEN = TweenService:Create(HRP, TWEEN_INFO, {CFrame = CFrame.new(ORIGIN, LOOK_AT)})

				LOOKTWEEN:Play()

				--//Detect if the waypoint has an entrance animation
				local ENTER_ANIMATION = REACHED_WAYPOINT:FindFirstChild("Enter")
				local ENTER_TRACK

				if ENTER_ANIMATION then
					local ANIMATION = ENTER_ANIMATION.Value 
					if ANIMATION then
						ENTER_TRACK = ANIMATOR:LoadAnimation(ANIMATION)
						ENTER_TRACK.Looped = false
						ENTER_TRACK.Priority = Enum.AnimationPriority.Action2
						ENTER_TRACK:Play()
					end
				end

				--//Detect if the waypoint has an interact animation
				local INTERACT_ANIMATIONS = {}
				local INTERACT_ANIMATIONID

				for i, animation in pairs(REACHED_WAYPOINT:GetChildren()) do
					if animation:IsA("ObjectValue") and animation.Name ~= "Enter" and animation.Name ~= "Leave" then
						table.insert(INTERACT_ANIMATIONS, animation)
					end
				end

				if #INTERACT_ANIMATIONS > 0 then
					local INTERACTION = INTERACT_ANIMATIONS[math.random(1, #INTERACT_ANIMATIONS)]
					local ANIMATION = INTERACTION.Value

					if ANIMATION then
						INTERACT_ANIMATIONID = INTERACTION.Value.AnimationId

						self.INTERACTION = ANIMATOR:LoadAnimation(ANIMATION)
						self.INTERACTION.Priority = Enum.AnimationPriority.Action
					end
				end

				--//Send signals
				self.events.Reached:Fire(REACHED_WAYPOINT, INTERACT_ANIMATIONID)

				--//Yield handlers
				if self.INTERACTION then
					--//Yields until entrance is done
					if ENTER_TRACK then
						ENTER_TRACK.Stopped:Wait()
					end
					--//Run the interaction after entrance
					self.INTERACTION:Play()

					--//Yield until interaction is done
					if not self.INTERACTION.Looped then
						self.INTERACTION.Stopped:Wait()
					end
				end
			end

			--//Send signals
			if not self.INTERACTION then
				self.events.Reached:Fire(REACHED_WAYPOINT, nil)
			end

			--//Going to the next waypoint
			local SUB_WAYPOINTS = importWaypoints(REACHED_WAYPOINT)

			if #SUB_WAYPOINTS > 0 then
				--//Sending current path saves to sub-path

				local sendData = {
					CURRENT_INDEX = CURRENT_INDEX,
					LAST_INDEX = LAST_INDEX,
					FINISHED = FINISHED,
				}

				self:Run(REACHED_WAYPOINT, sendData)
			else
				if FINISHED < #pathWaypoints or waypoints == self.MainPath then
					walk()
				else
					if REACHED_WAYPOINT.Parent.Parent then
						local UPPER_WAYPOINTS = importWaypoints(REACHED_WAYPOINT.Parent.Parent)

						--//Restoring upper path continuation
						local sendData = {
							CURRENT_INDEX = UPPER_CURRENT_INDEX,
							LAST_INDEX = UPPER_LAST_INDEX,
							FINISHED = FINISHED,
						}

						self:Run(REACHED_WAYPOINT.Parent.Parent, nil, sendData)
					end
				end
			end
		end

		local IMCOMING_WAYPOINT = pathWaypoints[CURRENT_INDEX]

		--//Connections
		self.connections.TrappedEvent = path.Trapped:Connect(function()
			path:Run(IMCOMING_WAYPOINT.Position)
		end)

		self.connections.ErrorEvent = path.Error:Connect(function()
			path:Run(IMCOMING_WAYPOINT.Position)
		end)

		self.connections.ReachedEvent = path.Reached:Connect(function()
			reached()
		end)

		--//Checking if the character is already reached the waypoint
		local distance = ((HRP.Position * Vector3.new(1, 0, 1) + IMCOMING_WAYPOINT.Position * Vector3.new(0, 1, 0)) - IMCOMING_WAYPOINT.Position).Magnitude

		if distance <= 0.01 then
			reached()
		else
			--//Yielding
			task.wait(self.Debounce)

			--//Send signals
			self.events.Next:Fire(IMCOMING_WAYPOINT)

			--//Stop current interaction
			if self.INTERACTION then
				self.INTERACTION:Stop()
				self.INTERACTION = nil
			end

			--//Exit animation
			if pathWaypoints[LAST_INDEX] then
				local LEAVE_ANIMATION = pathWaypoints[LAST_INDEX]:FindFirstChild("Leave")

				if LEAVE_ANIMATION then
					local ANIMATION = LEAVE_ANIMATION.Value
					if ANIMATION then
						local LEAVE_TRACK = ANIMATOR:LoadAnimation(ANIMATION)
						LEAVE_TRACK.Looped = false
						LEAVE_TRACK.Priority = Enum.AnimationPriority.Action2
						LEAVE_TRACK:Play()
						LEAVE_TRACK.Stopped:Wait()
					end
				end
			end

			HRP.Anchored = false

			path:Run(IMCOMING_WAYPOINT.Position)
		end
	end

	walk()
end

return agent
