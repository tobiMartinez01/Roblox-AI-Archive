-- Utility Functions
local function sortTable(t)
	table.sort(t, function(a, b)
		return tonumber(a.Name) < tonumber(b.Name)
	end)
end

local function importWaypoints(folder)
	local waypoints = {}
	for _, waypoint in ipairs(folder:GetChildren()) do
		if waypoint:IsA("BasePart") and not waypoint:GetAttribute("Unavailable") then
			table.insert(waypoints, waypoint)
		end
	end
	sortTable(waypoints)
	return waypoints
end

local function findAnimationTrackInTable(t, animId)
	for i, v in pairs(t) do
		if v.Animation.AnimationId == animId then
			return v
		end
	end

	return false
end

-- Modify clearConnections to handle nested tables if needed
local function clearConnections(connections)
	for _, conn in pairs(connections) do
		if type(conn) == "table" then
			clearConnections(conn)  -- Recursively clear nested connections
		elseif conn and typeof(conn.Disconnect) == "function" then
			conn:Disconnect()
		end
	end
	connections = {}  -- Reset the table
end
-----------------------------------------------------------
-- Agent Module
local agent = {}
agent.__index = agent

-- Services
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local PathfindingService = game:GetService("PathfindingService")
local ServerStorage = game:GetService("ServerStorage")

-- Modules
local NoobPath = require(ServerStorage.NoobPath)

-- Constructor
function agent.new(character, costs)
	local self = setmetatable({
		events = {
			Reached = Instance.new("BindableEvent"),
			Next = Instance.new("BindableEvent")
		},
		connections = {}
	}, agent)

	self.Character = character
	self.Reached = self.events.Reached.Event
	self.Next = self.events.Next.Event

	local pathParams = {
		AgentHeight = character:GetExtentsSize().Y,
		AgentCanJump = true,
		AgentCanClimb = true,
		Costs = costs,
		--WaypointSpacing = 8,
		PathSettings = {
			SupportPartialPath = true
		}
	}
	self.Path = NoobPath.Humanoid(character, pathParams)
	self.Path.Timeout = true
	self.Path.Partial = true
	self.Path.Speed = character.Humanoid.WalkSpeed

	local ANIMATOR = character.Humanoid:FindFirstChildWhichIsA("Animator")

	self.animationTracks = {}

	-- Load animation
	for i, anim in pairs(game.ReplicatedFirst.NPC_Animations:GetDescendants()) do
		if anim:IsA("Animation") then
			table.insert(self.animationTracks, ANIMATOR:LoadAnimation(anim))
		end
	end

	character.Humanoid:GetPropertyChangedSignal('WalkSpeed'):Connect(function()
		self.Path.Speed = character.Humanoid.WalkSpeed
	end)
	--self.Path.Visualize = true -- Uncomment to visualize paths

	return self
end

-----------------------------------------------------------
-- Main Agent Methods

function agent:Run(PATH_FOLDER)
	self.Thread = coroutine.create(function()
		local CHARACTER = self.Character
		local HRP = CHARACTER.HumanoidRootPart
		local HUMANOID = CHARACTER.Humanoid
		local ANIMATOR = HUMANOID:FindFirstChildWhichIsA("Animator")

		local PATH = self.Path

		local function runPath(folder)
			local path = importWaypoints(folder)

			if #path > 0 then
				local INDEX = 0
				local LAST_INDEX  = 0
				local FINISHED = 0
				local WAYPOINT = path[INDEX] 

				local function goToWaypoint()
					-- Next index
					if self.Randomized then
						repeat 
							INDEX = math.random(1, #path)
						until (path[INDEX] ~= WAYPOINT and INDEX ~= LAST_INDEX)
					else
						INDEX = (INDEX % #path) + 1
					end

					-- Occupied
					local CURRENT_WAYPOINT = path[INDEX]
					CURRENT_WAYPOINT:SetAttribute("Unavailable", true)

					-- Yield
					task.wait(self.Debounce or 0)

					--Stopping animations
					if self.INTERACTION then
						self.INTERACTION:Stop()
						self.INTERACTION = nil
					end

					-- Handle exit animation from previous waypoint if available
					if path[LAST_INDEX] then
						local LEAVE_ANIMATION = path[LAST_INDEX]:FindFirstChild("Leave")
						if LEAVE_ANIMATION and LEAVE_ANIMATION.Value then
							local LEAVE_TRACK = findAnimationTrackInTable(self.animationTracks, LEAVE_ANIMATION.Value.AnimationId)
							LEAVE_TRACK.Looped = false
							LEAVE_TRACK.Priority = Enum.AnimationPriority.Action2
							LEAVE_TRACK:Play()
							LEAVE_TRACK.Stopped:Wait()
						end
					end

					-- Fire event
					self.events.Next:Fire(CURRENT_WAYPOINT)

					-- Connections
					self.connections.TRAPPED = PATH.Trapped:Connect(function()
						PATH:Run(CURRENT_WAYPOINT.Position)
					end)

					self.connections.ERROR = PATH.Error:Connect(function()
						PATH:Run(CURRENT_WAYPOINT.Position)
					end)

					-- Unanchor to make them be able to move again
					HRP.Anchored = false

					-- [[ RUN ]]
					PATH:Run(CURRENT_WAYPOINT.Position)

					-- [[ FINISHED ]]
					PATH.Reached:Wait()

					-- Overriding values
					FINISHED+=1
					LAST_INDEX = INDEX
					CURRENT_WAYPOINT:SetAttribute("Unavailable", nil)
					
					self.Debounce = CURRENT_WAYPOINT:GetAttribute("Debounce") or 0
					self.Randomized = CURRENT_WAYPOINT:GetAttribute("Randomized") or false
					
					clearConnections(self.connections)

					-- Animations
					local ATTACHMENT = CURRENT_WAYPOINT:FindFirstChildWhichIsA("Attachment")

					if ATTACHMENT then
						--[[ STARE FEATURE ]]
						local ORIGIN = CURRENT_WAYPOINT.Position * Vector3.new(1, 0, 1) + HRP.Position * Vector3.new(0, 1, 0)
						local LOOK_AT = ATTACHMENT.WorldCFrame.Position * Vector3.new(1, 0, 1) + HRP.Position * Vector3.new(0, 1, 0)

						-- Wait until the NPC is in an idle state
						repeat 
							RunService.Heartbeat:Wait()
						until HUMANOID:GetState() ~= Enum.HumanoidStateType.Climbing 
							and HUMANOID:GetState() ~= Enum.HumanoidStateType.Jumping 
							and HUMANOID:GetState() ~= Enum.HumanoidStateType.Freefall 
							and HUMANOID.FloorMaterial ~= Enum.Material.Air 
							and HRP.Velocity.Magnitude < 0.01
							and PATH.Idle

						-- Anchor momentarily to avoid disturbance
						HRP.Anchored = true

						-- Tween rotation toward target direction
						local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut)
						local lookTween = TweenService:Create(HRP, tweenInfo, {CFrame = CFrame.new(ORIGIN, LOOK_AT)})
						lookTween:Play()

						lookTween.Completed:Wait()
						
						HRP.Anchored = false

						-- [[ ENTER ANIMATION ]]
						local ENTER_ANIMATION = CURRENT_WAYPOINT:FindFirstChild("Enter")
						local ENTER_TRACK

						if ENTER_ANIMATION and ENTER_ANIMATION.Value then
							ENTER_TRACK = findAnimationTrackInTable(self.animationTracks, ENTER_ANIMATION.Value.AnimationId)
							ENTER_TRACK.Looped = false
							ENTER_TRACK.Priority = Enum.AnimationPriority.Action2
							ENTER_TRACK:Play()
						end

						-- Handle interact animations (choose one at random)
						local INTERACT_AMIMS = {}
						local INTERACT_AMIMATIONID

						for _, ANIMATION in pairs(CURRENT_WAYPOINT:GetChildren()) do
							if ANIMATION:IsA("ObjectValue") and ANIMATION.Name ~= "Enter" and ANIMATION.Name ~= "Leave" then
								table.insert(INTERACT_AMIMS, ANIMATION)
							end
						end

						if #INTERACT_AMIMS > 0 then
							local CHOSEN = INTERACT_AMIMS[math.random(1, #INTERACT_AMIMS)]
							if CHOSEN.Value then
								INTERACT_AMIMATIONID = CHOSEN.Value.AnimationId
								self.INTERACTION = findAnimationTrackInTable(self.animationTracks, INTERACT_AMIMATIONID)
								self.INTERACTION.Priority = Enum.AnimationPriority.Action
							end
						end

						-- Fire the Reached event with optional interact animation id
						self.events.Reached:Fire(CURRENT_WAYPOINT, INTERACT_AMIMATIONID)

						-- Yields
						if self.INTERACTION then
							if ENTER_TRACK then
								ENTER_TRACK.Stopped:Wait()
							end

							self.INTERACTION:Play()

							if not self.INTERACTION.Looped then
								self.INTERACTION.Stopped:Wait()
							end
						end
					end

					-- Sub-waypoints
					runPath(CURRENT_WAYPOINT)

					-- Continue same level path
					if FINISHED < #path or folder == PATH_FOLDER then
						goToWaypoint()
					end
				end

				goToWaypoint()
			end
		end

		runPath(PATH_FOLDER)
	end)

	coroutine.resume(self.Thread)
end

return agent
