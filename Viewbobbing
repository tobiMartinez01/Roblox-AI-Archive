-- Services
local RUNSERVICE = game:GetService("RunService")
local PLAYER_SERVICE = game:GetService("Players")
local UIS = game:GetService("UserInputService")

-- Client
local PLAYER = PLAYER_SERVICE.LocalPlayer
local CAMERA = workspace.CurrentCamera

local sin = math.sin
local cos = math.cos
local pi = math.pi

-- Functions
local function Lerp(num, goal, i)
	return num + (goal-num)*i
end

-- Character
local CHARACTER = nil
local HRP = nil

--//Params
local AMPLITUTE = 0.5
local SMOOTHING = 5.0

--//Variables
local viewbobbing_enabled = true
local currentOmega = 0
local currentAmplitute = 0

local phase = 0

PLAYER.CharacterAdded:Connect(function(character)
	CHARACTER = character
	HRP = character.HumanoidRootPart
	
	local character_destroying
	local state_changed
	
	state_changed = CHARACTER.Humanoid.StateChanged:Connect(function(oldState, newState)
		if newState == Enum.HumanoidStateType.Jumping or newState == Enum.HumanoidStateType.Freefall then
			viewbobbing_enabled = false
		else
			viewbobbing_enabled = true
		end
	end)
	
	character_destroying = CHARACTER.Destroying:Connect(function()
		character_destroying:Disconnect()
	end)
end)

function updateViewbobbing(DT)
	--//Checking if character exists
	if CHARACTER then
		--//Getting velocity
		local vel = HRP.Velocity
		local speed = vel.Magnitude

		local targetOmega = speed * 0.15 * pi
		--//Using math.min to flexibly transit between different speed and humanoidstates
		local targetAmplitute = math.min(speed * 0.015, AMPLITUTE)
		
		--//Checking if viewbobbing is enabled
		if not viewbobbing_enabled then
			targetOmega = 0
			targetAmplitute = 0
		end

		--//Smoothen the delta
		currentOmega = currentOmega + (targetOmega - currentOmega) * SMOOTHING * DT
		currentAmplitute = currentAmplitute + (targetAmplitute - currentAmplitute) * SMOOTHING * DT

		--//Phase is also omega*time, this line is phase rotating to a new phase
		phase = phase + currentOmega * DT

		local bobbing = {
			X = currentAmplitute * sin(phase),
			Y = math.abs(currentAmplitute * sin(phase + pi/2)) - currentAmplitute
		}

		CHARACTER.Humanoid.CameraOffset = Vector3.new(bobbing.X, bobbing.Y, 0)
	end
end

RUNSERVICE.RenderStepped:Connect(updateViewbobbing)
